import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define the structure of an expense item based on Java DTO
interface Expense {
  transactionReference: string;
  branchCode: string;
  staffPhone: string;
  expenseDate: string;
  expenseAmount: number;
  expenseCategory: string;
  receiptImageUrl: string;
}

// Define the structure of the expenses state
interface ExpensesState {
  expenses: Expense[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

// Initialize the expenses state
const initialState: ExpensesState = {
  expenses: [],
  status: 'idle',
  error: null,
};

// Create a slice for managing expenses
const expensesSlice = createSlice({
  name: 'expenses',
  initialState,
  reducers: {
    setExpenses: (state, action: PayloadAction<Expense[]>) => {
      state.expenses = action.payload;
      state.status = 'succeeded';
      state.error = null;
    },
    addExpense: (state, action: PayloadAction<Expense>) => {
      state.expenses.push(action.payload);
    },
    removeExpense: (state, action: PayloadAction<string>) => {
      state.expenses = state.expenses.filter(expense => expense.transactionReference !== action.payload);
    },
    setError: (state, action: PayloadAction<string>) => {
      state.error = action.payload;
      state.status = 'failed';
    },
    setLoading: (state) => {
      state.status = 'loading';
    },
  },
});

// Export the action creators generated by createSlice
export const { setExpenses, addExpense, removeExpense, setError, setLoading } = expensesSlice.actions;

// Export the reducer to be included in the Redux store
export default expensesSlice.reducer;
