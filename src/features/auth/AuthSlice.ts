import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define the structure of the authentication state
interface AuthState {
  isAuthenticated: boolean; // Indicates if a user is authenticated
  user: string | null; // Stores the authenticated user's username or null if not logged in
  token: string | null; // Stores JWT token for authenticated requests
  name: string | null; // Stores the user's full name
  role: string | null; // Stores the user's role
  branchCode: string | null; // Stores the user's branch code
  staffPhone: string | null; // Stores the user's staff phone number
}

// Initialize the authentication state from localStorage
const initialState: AuthState = {
  isAuthenticated: localStorage.getItem('token') !== null, // Check if token is present in localStorage
  user: localStorage.getItem('user'), // Retrieve the username from localStorage
  token: localStorage.getItem('token'), // Retrieve the token from localStorage
  name: localStorage.getItem('name'), // Retrieve the user's full name from localStorage
  role: localStorage.getItem('role'), // Retrieve the user's role from localStorage
  branchCode: localStorage.getItem('branchCode'), // Retrieve the branch code from localStorage
  staffPhone: localStorage.getItem('staffPhone'), // Retrieve the staff phone number from localStorage
};

// Create a slice for managing authentication state
const authSlice = createSlice({
  name: 'auth', // Name of the slice
  initialState, // Initial state for the slice
  reducers: {
    // Reducer to handle login action
    // Sets isAuthenticated to true, stores user details, and JWT token
    login: (state, action: PayloadAction<AuthState>) => {
      state.isAuthenticated = true;
      state.user = action.payload.user;
      state.token = action.payload.token;
      state.name = action.payload.name;
      state.role = action.payload.role;
      state.branchCode = action.payload.branchCode;
      state.staffPhone = action.payload.staffPhone;
      localStorage.setItem('token', action.payload.token || ''); // Persist token in localStorage
      localStorage.setItem('user', action.payload.user || ''); // Save the username in localStorage
      localStorage.setItem('name', action.payload.name || ''); // Save the user's full name in localStorage
      localStorage.setItem('role', action.payload.role || ''); // Save the user's role in localStorage
      localStorage.setItem('branchCode', action.payload.branchCode || ''); // Save the branch code in localStorage
      localStorage.setItem('staffPhone', action.payload.staffPhone || ''); // Save the staff phone number in localStorage
    },

    // Reducer to handle logout action
    // Sets isAuthenticated to false and clears the user information and token
    logout: (state) => {
      state.isAuthenticated = false;
      state.user = null;
      state.token = null;
      state.name = null;
      state.role = null;
      state.branchCode = null;
      state.staffPhone = null;
      localStorage.removeItem('token'); // Remove token from localStorage
      localStorage.removeItem('user'); // Remove the username from localStorage
      localStorage.removeItem('name'); // Remove the user's full name from localStorage
      localStorage.removeItem('role'); // Remove the user's role from localStorage
      localStorage.removeItem('branchCode'); // Remove the branch code from localStorage
      localStorage.removeItem('staffPhone'); // Remove the staff phone number from localStorage
    },
  },
});

// Export the login and logout action creators generated by createSlice
export const { login, logout } = authSlice.actions;

// Export the reducer to be included in the Redux store
export default authSlice.reducer;
